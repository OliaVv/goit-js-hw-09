{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,QAC9BC,EAAUF,SAASC,cAAc,uBACjCE,EAASH,SAASC,cAAc,sBAChCG,EAAWJ,SAASC,cAAc,wBAClCI,EAAgB,CAClBC,SAAU,gBACVC,aAAa,EACbC,cAAc,GAuBhB,SAASC,EAAcH,EAAUI,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAS,CAACC,EAASC,KAC5BC,YAAW,KACLP,EAAQ,EACVb,EAAAqB,OAAOC,QAAQ,6BAA8Bd,GAG3CM,EACJI,EAAQ,C,SAACT,E,MAAUI,IAEnBM,EAAO,C,SAACV,E,MAAUI,GAAO,GAE1BA,EAAM,G,CAjCbX,EAAKqB,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACR,IAAIC,EAAQC,OAAOtB,EAAQuB,OAC3B,MAAMC,EAAOF,OAAOrB,EAAOsB,OACnBE,EAASH,OAAOpB,EAASqB,OAC/BG,QAAQC,IAAIN,GAEZ,IAAK,IAAIO,EAAW,EAAGA,GAAYH,EAAQG,GAAY,EACrDrB,EAAcqB,EAAUP,GACrBQ,MAAK,EAACzB,SAAEA,EAAQI,MAAEA,MACjBb,EAAAqB,OAAOc,QAAQ,qBAAqB1B,QAAeI,MAAWL,EAAc,IAC7E4B,OAAM,EAAC3B,SAAEA,EAAQI,MAAEA,MAClBb,EAAAqB,OAAOC,QAAQ,oBAAoBb,QAAeI,MAAWL,EAAc,IAC/EkB,GAASG,EAEXL,EAAMa,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector(\"form\");\nconst delayEl = document.querySelector(\"input[name='delay']\");\nconst stepEl = document.querySelector(\"input[name='step']\");\nconst amountEl = document.querySelector(\"input[name='amount']\");\nconst notifyOptions = {\n    position: 'center-center',\n    backOverlay: true,\n    clickToClose: true,\n}\n\nform.addEventListener(\"submit\", onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\nlet delay = Number(delayEl.value); \nconst step = Number(stepEl.value);\n  const amount = Number(amountEl.value);\n  console.log(delay);\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`, notifyOptions)})\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`, notifyOptions)})\n    delay += step;\n  } \n  event.currentTarget.reset();\n}\n\n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n    return new Promise ((resolve, reject) => {\n      setTimeout(() => {\n        if (delay < 0) {\n          Notify.failure('Задайте позитивне значення', notifyOptions)\n          return;\n        }\n        if (shouldResolve) {\n        resolve({position, delay})\n      } else {\n        reject({position, delay});\n      }\n    }, delay);\n   }); \n};\n\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayEl","$47d4ff9957288465$var$stepEl","$47d4ff9957288465$var$amountEl","$47d4ff9957288465$var$notifyOptions","position","backOverlay","clickToClose","$47d4ff9957288465$var$createPromise","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","Notify","failure","addEventListener","event","preventDefault","delay1","Number","value","step","amount","console","log","position1","then","success","catch","currentTarget","reset"],"version":3,"file":"03-promises.bae0f63a.js.map"}