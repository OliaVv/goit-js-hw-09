{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,QAC9BC,EAAUF,SAASC,cAAc,uBACjCE,EAASH,SAASC,cAAc,sBAChCG,EAAWJ,SAASC,cAAc,wBAClCI,EAAgB,CAClBC,SAAU,gBACVC,aAAa,EACbC,cAAc,GAsBhB,SAASC,EAAcH,EAAUI,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAS,SAACC,EAASC,GAC9BC,YAAW,WACNN,EACDI,EAAQ,CAACT,WAAUI,UAEnBM,EAAO,CAACV,WAAUI,S,GAEnBA,E,IA5BPX,EAAKmB,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACR,IAAIC,EAAQC,OAAOpB,EAAQqB,OACrBC,EAAOF,OAAOnB,EAAOoB,OACnBE,EAASH,OAAOlB,EAASmB,OAC/BG,QAAQC,IAAIN,GAEZ,IAAK,IAAIO,EAAW,EAAGA,GAAYH,EAAQG,GAAY,EACrDnB,EAAcmB,EAAUP,GACrBQ,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUI,EAAKoB,EAALpB,MACjBb,EAAAkC,OAAOC,QAAQ,qBAAoCC,OAAf3B,EAAS,QAAY2B,OAANvB,EAAM,MAAKL,E,IAC/D6B,OAAM,SAAAJ,G,IAAGxB,EAAQwB,EAARxB,SAAUI,EAAKoB,EAALpB,MAClBb,EAAAkC,OAAOI,QAAQ,oBAAmCF,OAAf3B,EAAS,QAAY2B,OAANvB,EAAM,MAAKL,E,IAC/DgB,GAASG,EAEbL,EAAMiB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector(\"form\");\nconst delayEl = document.querySelector(\"input[name='delay']\");\nconst stepEl = document.querySelector(\"input[name='step']\");\nconst amountEl = document.querySelector(\"input[name='amount']\");\nconst notifyOptions = {\n    position: 'center-center',\n    backOverlay: true,\n    clickToClose: true,\n}\n\nform.addEventListener(\"submit\", onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\nlet delay = Number(delayEl.value); \nconst step = Number(stepEl.value);\n  const amount = Number(amountEl.value);\n  console.log(delay);\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`, notifyOptions)})\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`, notifyOptions)})\n      delay += step;\n  } \n  event.currentTarget.reset();\n  }\n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n    return new Promise ((resolve, reject) => {\n    setTimeout(() => {\n      if(shouldResolve) {\n        resolve({position, delay})\n      } else {\n        reject({position, delay});\n      }\n    }, delay);\n   }); \n};\n\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayEl","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$notifyOptions","position","backOverlay","clickToClose","$ce04d3a99e08e73b$var$createPromise","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","step","amount","console","log","position1","then","param","Notify","success","concat","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.90e27d73.js.map"}